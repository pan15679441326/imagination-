1.版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。
2.人为维护文档管理的问题：
      1.文档数量多且命名不清晰导致文档版本混乱
      2.每次编辑文档需要复制，不方便
      3.多人同时编辑一个文档，容易产生覆盖
3.Git是一个版本管理控制系统（缩写vcs），他可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来
4.Git使用
       使用前配置
      1.配置提交人的姓名：git config --global user .name 提交人姓名
      2.配置提交人的邮箱：git config --global user .name 提交人邮箱
      3.查看git配置信息：git config --list

      提交步骤
      1. git init初始化git仓库
      2. git status查看文件状态
      3. git add文件列表追踪文件
      4. git commit -m 提交信息向仓库中提交代码
      5. git 1og查看提交记录
      
      恢复记录
      git rest --hard commitID 将仓库指定的更新纪录恢复并覆盖暂存区和工作目录

      撤销
      用暂存区中的文件覆盖工作目录中的文件: git checkout 文件
      将文件从暂存区中删除: git rm --cached文件
      将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录: git rest --hard commitID

      分支细分
      1.主分支(master) :第- -次向git仓库中提交更新记录时自动产生的-一个分支。
      2.开发分支(develop) : 作为开发的分支，基于master分支创建。
      3.功能分支(feature) :作为开发具体功能的分支,基于开发分支创建

      分支命令
      1.git branch查看分支
      2.git branch 分支名称创建分支
      3.git checkout 分支名称切换分支
      4.git merge 来源分支合并分支
      5.git branch -d分支名称删除分支(分支被合并后才允许删除) (-D强制删除)

      暂时保存更改      
      在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本,临时转向其他工作。
      使用场景: 分支临时切换
      存储临时改动: git stash
      恢复改动: git stash pop

      





